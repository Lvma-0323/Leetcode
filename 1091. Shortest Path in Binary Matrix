# 1091. Shortest Path in Binary Matrix
### Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.
### A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:
* All the visited cells of the path are 0.
* All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
### The length of a clear path is the number of visited cells of this path.

**Example 1:**
```
Input: grid = [[0,1],[1,0]]
Output: 2
```

**Example 2:**
```
Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4
```

**Example 3:**
```
Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1
```

#### My code
```
class Solution {
public:
    vector<vector<int>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        if(grid[0][0] == 1 || grid[n-1][n-1] == 1) return -1;
        queue<pair<int, int>> Q;
        Q.push(make_pair(0, 0));
        grid[0][0] = 2; //visited
        
        int len = 0;
        while(!Q.empty()) {
            int size = Q.size();
            len++;
            for(int i=0; i<size; i++) {
                pair<int, int> cur = Q.front();
                if(cur.first == n-1 && cur.second == n-1) return len;
                
                Q.pop();
                for(vector<int>dir : dirs) {
                    if(cur.first + dir[0] >=0 && cur.first + dir[0] < n &&
                     cur.second + dir[1] >= 0 && cur.second + dir[1] < n &&
                     grid[cur.first+dir[0]][cur.second+dir[1]] == 0) {
                         Q.push(make_pair(cur.first+dir[0], cur.second+dir[1]));
                         grid[cur.first+dir[0]][cur.second+dir[1]] = 2; //visited
                     }
                }
            }
        }
        return -1;
    }
};
```
